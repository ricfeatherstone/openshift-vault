def name = 'consul'
def appName = 'vault'
def buildDir = 'build'

properties([
    parameters([
        string(name: 'baseImage', defaultValue: 'centos', description: 'The base image to build from'),
        string(name: 'consulVersion', defaultValue: '1.0.3', description: 'The version of Vault to use'),
        string(name: 'dumbInitVersion', defaultValue: '1.2.1', description: 'The version of Dumb-init to use')
    ])
])

node() {
    stage('Clean Checkout') {
        deleteDir()
        checkout scm
    }

    stage('Prepare Build Artefacts') {
        dir(buildDir) {
            sh "curl -sSL -o dumb-init ${dumbInitUrl()}"
            sh 'chmod +x dumb-init'

            sh "curl -sSL -o consul.zip ${consulUrl()}"
            sh 'unzip consul.zip && rm consul.zip'

            writeFile(file: 'Dockerfile', text: createDockerfile())
        }
    }

    stage('Build Image') {
        openshift.withCluster() {
            namespace = openshift.project()

            if(!openshift.selector('bc', name).exists()) {
                openshift.newBuild("--name=${name}",
                    "--to=${namespace}/${name}:latest",
                    '--binary=true',
                    "--labels=app=${appName}")
            }

            dir(buildDir) {
                build = openshift.startBuild(name,
                    '--from-dir="."',
                    '--wait=true').narrow('build').object()

                imageDigest = build.status.output.to.imageDigest
                buildNumber = "${build.metadata.annotations.get('openshift.io/build.number')}"
                
                echo "Build #${buildNumber} created ${namespace}/${name}@${imageDigest}"
             }
        }
    }
}

def dumbInitUrl() {
    "https://github.com/Yelp/dumb-init/releases/download/v${params.dumbInitVersion}/dumb-init_${params.dumbInitVersion}_amd64"
}

def consulUrl() {
    "https://releases.hashicorp.com/consul/${params.consulVersion}/consul_${params.consulVersion}_linux_amd64.zip"
}

def createDockerfile() {
    """\
FROM ${params.baseImage}
MAINTAINER Ric Featherstone <ricfeatherstone@users.noreply.github.com>

ENV CONSUL_VERSION=${params.consulVersion} \\
    DUMB_INIT_VERSION=${params.dumbInitVersion}

LABEL io.k8s.description="" \\
      io.k8s.display-name="" \\
      io.openshift.expose-services="8443:http" \\
      io.openshift.tags=""

RUN groupadd consul -g 5000 && \\
    useradd -g consul -r -M -u 1000 consul && \\
    mkdir -p /consul/data && \\
    mkdir -p /consul/config && \\
    chown -R consul:consul /consul

VOLUME /consul/data

EXPOSE 8300 8301 8301/udp 8302 8302/udp 8443 8500 8600 8600/udp

COPY dumb-init /usr/bin/dumb-init
COPY consul /usr/bin/consul

USER 1000

ENTRYPOINT ["/usr/bin/dumb-init", "consul"]
CMD ["agent", "-dev", "-client", "0.0.0.0"]
"""
}
